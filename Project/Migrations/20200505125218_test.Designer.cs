// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Models;

namespace Project.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20200505125218_test")]
    partial class test
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Project.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CategoryId");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            CategoryName = "Web Development",
                            Description = "Web development refers to building, creating, and an maintaining websites"
                        },
                        new
                        {
                            CategoryId = 2,
                            CategoryName = "Mobile Apps",
                            Description = "Mobile app development is the act or process by which a mobile app is developed for mobile devices, such as personal digital assistants, enterprise digital assistants or mobile phones"
                        },
                        new
                        {
                            CategoryId = 3,
                            CategoryName = "Web design",
                            Description = "Web designers use their creative and software engineering/programing skills to design, build and improve websites"
                        });
                });

            modelBuilder.Entity("Project.Models.Course", b =>
                {
                    b.Property<int>("CourseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("ImageThumbnailUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("InStock")
                        .HasColumnType("bit");

                    b.Property<bool>("IsCourseOfTheWeek")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CourseId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Courses");

                    b.HasData(
                        new
                        {
                            CourseId = 1,
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://img-a.udemycdn.com/course/240x135/851712_fc61_5.jpg",
                            ImageUrl = "https://img-a.udemycdn.com/course/750x422/437398_46c3_9.jpg",
                            InStock = true,
                            IsCourseOfTheWeek = true,
                            Name = "The Complete JavaScript Course 2020: Build Real Projects!",
                            Price = 20m,
                            ShortDescription = "Master JavaScript with the most complete course! Projects, challenges, quizzes, JavaScript ES6+, OOP, AJAX, Webpack"
                        },
                        new
                        {
                            CourseId = 2,
                            CategoryId = 1,
                            ImageThumbnailUrl = "https://img-a.udemycdn.com/course/240x135/1463348_52a4_2.jpg",
                            ImageUrl = "https://img-a.udemycdn.com/course/750x422/1463348_52a4_2.jpg",
                            InStock = true,
                            IsCourseOfTheWeek = true,
                            Name = "Modern JavaScript From The Beginning",
                            Price = 39m,
                            ShortDescription = "Learn and build projects with pure JavaScript (No frameworks or libraries)"
                        },
                        new
                        {
                            CourseId = 3,
                            CategoryId = 2,
                            ImageThumbnailUrl = "https://img-a.udemycdn.com/course/240x135/951618_0839_2.jpg",
                            ImageUrl = "https://coursedrive.us/wp-content/uploads/2020/02/The-Complete-Android-N-Developer-Course-Drive.jpg",
                            InStock = true,
                            IsCourseOfTheWeek = true,
                            Name = "The Complete Android N Developer Course",
                            Price = 19m,
                            ShortDescription = "Learn Android App Development with Android 7 Nougat by building real apps including Uber, Whatsapp and Instagram!"
                        },
                        new
                        {
                            CourseId = 4,
                            CategoryId = 3,
                            ImageThumbnailUrl = "https://img-a.udemycdn.com/course/240x135/437398_46c3_9.jpg",
                            ImageUrl = "https://img-a.udemycdn.com/course/750x422/437398_46c3_9.jpg",
                            InStock = true,
                            IsCourseOfTheWeek = true,
                            Name = "The easiest way to learn modern web design, HTML5 and CSS3 step-by-step from scratch. Design AND code a huge project",
                            Price = 78m,
                            ShortDescription = "The easiest way to learn modern web design, HTML5 and CSS3 step-by-step from scratch. Design AND code a huge project"
                        });
                });

            modelBuilder.Entity("Project.Models.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("AddressLine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(100)")
                        .HasMaxLength(100);

                    b.Property<string>("AddressLine2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(60)")
                        .HasMaxLength(60);

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(50)")
                        .HasMaxLength(50);

                    b.Property<DateTime>("OrderPlaced")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("OrderTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(25)")
                        .HasMaxLength(25);

                    b.Property<string>("State")
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.Property<string>("ZipCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(10)")
                        .HasMaxLength(10);

                    b.HasKey("OrderId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Project.Models.OrderDetail", b =>
                {
                    b.Property<int>("OrderDetailId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int>("CourseId")
                        .HasColumnType("int");

                    b.Property<int>("OrderId")
                        .HasColumnType("int");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderDetailId");

                    b.HasIndex("CourseId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Project.Models.ShoppingCartItem", b =>
                {
                    b.Property<int>("ShoppingCartItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("Amount")
                        .HasColumnType("int");

                    b.Property<int?>("CourseId")
                        .HasColumnType("int");

                    b.Property<string>("ShoppingCartId")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ShoppingCartItemId");

                    b.HasIndex("CourseId");

                    b.ToTable("ShoppingCartItems");
                });

            modelBuilder.Entity("Project.Models.Course", b =>
                {
                    b.HasOne("Project.Models.Category", "Category")
                        .WithMany("Coureses")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.OrderDetail", b =>
                {
                    b.HasOne("Project.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Project.Models.Order", "Order")
                        .WithMany("OrderDetails")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Models.ShoppingCartItem", b =>
                {
                    b.HasOne("Project.Models.Course", "Course")
                        .WithMany()
                        .HasForeignKey("CourseId");
                });
#pragma warning restore 612, 618
        }
    }
}
